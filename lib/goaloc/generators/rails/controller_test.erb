require File.dirname(__FILE__) + '/../test_helper'

class <%= goal.cp %>ControllerTest < ActionController::TestCase
  def setup
    <%= goal.resource_tuple.map { |var| generator.test_var_string(var) }.join("\n    ") %>
  end

  context "on GET to <%= goal.cp %>Controller#index" do
    setup do
      get <%= [[':index'] + goal.resource_tuple[0..-2].map {|m| ":#{m.to_s.singularize}_id => @#{m.to_s.singularize}.to_param" }].join(", ") %>
    end

    should_respond_with :success
    should_assign_to :<%= goal.p %>
    should_render_template :index
    should_not_set_the_flash
    should_not_change "<%= goal.cs%>.count"
  end

  context "on GET to <%= goal.cp %>Controller#show" do
    setup do
      get <%= [[":show, :id => #{generator.ivar_name(goal)}.to_param"] + goal.resource_tuple[0..-2].map {|m| ":#{m.to_s.singularize}_id => @#{m.to_s.singularize}.to_param" }].join(", ")  %>
    end

    should_assign_to :<%= goal.s %>
    should_respond_with :success
    should_render_template :show
    should_not_set_the_flash
    should_not_change "<%= goal.cs%>.count"
    should "set <%= generator.ivar_name(goal) %> to requested instance" do
      assert_equal <%= generator.ivar_name(goal) %>, assigns(:<%= goal.s %>)
    end
  end

  context "on GET to <%= goal.cp %>Controller#new" do
    setup do
      get <%= [[":new"] + goal.resource_tuple[0..-2].map {|m| ":#{m.to_s.singularize}_id => @#{m.to_s.singularize}.to_param" }].join(", ") %>
    end

    should_respond_with :success
    should_assign_to :<%= goal.s %>
    should_not_set_the_flash
    should_render_template :new
    should_render_a_form
    should_not_change "<%= goal.cs%>.count"
  end

  context "on GET to <%= goal.cp %>Controller#edit" do
    setup do
      get <%= [[":edit, :id => #{generator.ivar_name(goal)}.to_param"] + goal.resource_tuple[0..-2].map {|m| ":#{m.to_s.singularize}_id => @#{m.to_s.singularize}.to_param" }].join(", ")  %>
    end

    should_assign_to :<%= goal.s %>
    should_respond_with :success

    should_render_template :edit
    should_not_set_the_flash
    should_render_a_form
    should_not_change "<%= goal.cs%>.count"
    should "set <%= generator.ivar_name(goal) %> to requested instance" do
      assert_equal <%= generator.ivar_name(goal) %>, assigns(:<%= goal.s %>)
    end
  end

  context "on POST to <%= goal.cp %>Controller#create with " do
    setup do
      post <%= [[":create"] + goal.resource_tuple[0..-2].map {|m| ":#{m.to_s.singularize}_id => @#{m.to_s.singularize}.to_param" }].join(", ") %>, :<%= goal.s %> => { <%= generator.required_nonpath_param_string(goal) %> }
    end

    should_assign_to :<%= goal.s %>
    should_set_the_flash_to(/created/i)
    should_redirect_to "<%= collection_path(goal) %>"
    should "not have errors on <%= generator.ivar_name(goal) %>" do 
      assert assigns(:<%= goal.s %>).errors.blank?
    end
    should_change "<%= goal.cs %>.count", :by => 1
  end

  context "on PUT to <%= goal.cp %>Controller#update with" do
    setup do
      put <%= [[":update, :id => #{generator.ivar_name(goal)}.to_param"] + goal.resource_tuple[0..-2].map {|m| ":#{m.to_s.singularize}_id => @#{m.to_s.singularize}.to_param" }].join(", ") %>
    end

    should_assign_to :<%= goal.s %>
    should_set_the_flash_to(/updated/i)
    should_redirect_to "<%= object_path(goal) %>"
    should_not_change "<%= goal.cs%>.count"
    should "not have errors on <%= generator.ivar_name(goal) %>" do
      assert assigns(:<%= goal.s %>).errors.empty?
    end
  end

  context "on DELETE to <%= goal.cp %>Controller#destroy" do
    setup do
      delete <%= [[":destroy, :id => #{generator.ivar_name(goal)}.to_param"] + goal.resource_tuple[0..-2].map {|m| ":#{m.to_s.singularize}_id => @#{m.to_s.singularize}.to_param" }].join(", ") %>
    end

    should_set_the_flash_to(/removed/i)
    should_redirect_to "<%= collection_path(goal) %>"
    should_change "<%= goal.cs %>.count", :by => -1
  end

  context "on GET to <%= goal.cp %>Controller#index as xml" do
    setup do
      get <%= [[":index"] + goal.resource_tuple[0..-2].map {|m| ":#{m.to_s.singularize}_id => @#{m.to_s.singularize}.to_param" }].join(", ")  %>, :format => "xml"
    end

    should_respond_with :success
    should_respond_with_content_type :xml #('<%= goal.p %>') # TODO: fix this

    should_assign_to :<%= goal.p %>
  end

  context "on GET to <%= goal.cp %>Controller#show as xml" do
    setup do
      get <%= [[":show, :id => #{generator.ivar_name(goal)}.to_param"] + goal.resource_tuple[0..-2].map {|m| ":#{m.to_s.singularize}_id => @#{m.to_s.singularize}.to_param" }].join(", ")  %>, :format => "xml"
    end

    should_assign_to :<%= goal.s %>
    should_respond_with :success

#    should_respond_with_xml_for('<%= goal.s %>') # TODO: fix this
  end

  context "on POST to <%= goal.cp %>Controller#create as xml" do
    setup do
      post <%= [[":create"] + goal.resource_tuple[0..-2].map {|m| ":#{m.to_s.singularize}_id => @#{m.to_s.singularize}.to_param" }].join(", ")  %>, :<%= goal.s %> => { <%= generator.required_nonpath_param_string(goal) %> }
    end

    should_assign_to :<%= goal.s %>
    should "not have errors on <%= generator.ivar_name(goal) %>" do 
      assert assigns(:<%= goal.s %>).errors.blank?
    end
  end

  context "on PUT to <%= goal.cp %>Controller#update as xml" do
    setup do
      put <%= [[":update, :id => #{generator.ivar_name(goal)}.to_param"] + goal.resource_tuple[0..-2].map {|m| ":#{m.to_s.singularize}_id => @#{m.to_s.singularize}.to_param" }].join(", ")  %>
    end

    should_assign_to :<%= goal.s %>
    should "not have errors on <%= generator.ivar_name(goal) %>" do
      assert assigns(:<%= goal.s %>).errors.blank?
    end
  end

  context "on DELETE to <%= goal.cp %>Controller#destroy as xml" do
    setup do
      delete <%= [[":destroy, :id => #{generator.ivar_name(goal)}.to_param"] + goal.resource_tuple[0..-2].map {|m| ":#{m.to_s.singularize}_id => @#{m.to_s.singularize}.to_param" }].join(", ")  %>
    end

    should_change "<%= goal.cs %>.count", :by => -1
  end
end
