*hello-world(something that generates a page that says 'hello world')
*todo app a la sproutcore todo example.
*unauth'd blog(just 2 models, standard REST actions)
*auth'd blog(users, posts, comments) (assuming the presence of an authentication module)
*lemmr (posts, comments, ratings on both, asymmetric friendships, login, per-user feeds on different sites)
*twitter at trivial scale - should be easy.
*twitter at moderate scale - should be an easyish refactor on the trivial scale one.

--maybe--
*arc challenge(from: http://www.paulgraham.com/arcchallenge.html )
   Write a program that causes the url said
   (e.g. http://localhost:port/said) to produce a page with an input
   field and a submit button. When the submit button is pressed, that
   should produce a second page with a single link saying "click here."
   When that is clicked it should lead to a third page that says "you
   said: ..." where ... is whatever the user typed in the original
   input field. The third page must only show what the user actually
   typed. I.e. the value entered in the input field must not be passed
   in the url, or it would be possible to change the behavior of the
   final page by editing the url.
Not sure that I actually want to support this.  Seaside/arc-style stateful app servers aren't interesting.
The code in arc is:
(defop said req
  (aform [w/link (pr "you said: " (arg _ "foo"))
           (pr "click here")]
    (input "foo")
    (submit)))


I think the hello-world one is:
defresp "/" "hello"

(defresp / "hello")

(defop hello req (pr "hello world"))
(asv)

todo is:
route [:tasks]  or with auth:  route [authenticated_user, :tasks]
add_attrs {:tasks => "name:string is_done:bool"}

(route tasks)
(add_attrs { 'tasks => "name:string is_done:bool" })

the unauthed blog is:
route [:posts, :comments]
add_attrs { :posts => "body:text title:string", :comments => "body:text" }

(route (posts comments))
(add_attrs { 'posts => "body:text title:string", 'comments => "body:text" })

the auth'd blog is
route [authenticated_user, [:posts, comments]]
add_attrs { 'posts => "body:text title:string", 'comments => "body:text" }

(route ((authenticated_user {'route => t}) ('posts 'comments)))
(add_attrs { 'posts => "body:text title:string", 'comments => "body:text" })

lemmr is:
route [ authenticated_user, { :through => :following, :class => :user }, [:posts, :ratings, [:comments, :ratings]]]
add_attrs {:posts => "body:text title:string", :comments => "body:text", :ratings => "score:int user:references"}

twitter is:
route [:user, :statuses, { :through => :following, :class => :user }], [authenticated_user, { :through => :following, :class => :user }, [:statuses, :favorites]]
add_attrs {:posts => "body:text"}

an example change from low to moderate scale would be to define a home_timeline method and make that talk to a network service that would handle status caches, etc..  It seems like it should be possible to scaffold thrift services in much the same way restful resources are.
