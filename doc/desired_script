*hello-world(something that generates a page that says 'hello world')
*arc challenge(from: http://www.paulgraham.com/arcchallenge.html )
   Write a program that causes the url said
   (e.g. http://localhost:port/said) to produce a page with an input
   field and a submit button. When the submit button is pressed, that
   should produce a second page with a single link saying "click here."
   When that is clicked it should lead to a third page that says "you
   said: ..." where ... is whatever the user typed in the original
   input field. The third page must only show what the user actually
   typed. I.e. the value entered in the input field must not be passed
   in the url, or it would be possible to change the behavior of the
   final page by editing the url.
*unauth'd blog(just 2 models, standard REST actions)
*auth'd blog(users, posts, comments) (assuming the presence of an authentication module)
*lemmr (posts, comments, ratings on both, asymmetric friendships, login, per-user feeds on different sites)
*twitter at trivial scale - should be easy.
*twitter at moderate scale - should be an easyish refactor on the trivial scale one.

I think the hello-world one is:
defresp "/" "hello"

(defresp / "hello")

(defop hello req (pr "hello world"))
(asv)

arc challenge:

(defop said req
  (aform [w/link (pr "you said: " (arg _ "foo"))
           (pr "click here")]
    (input "foo")
    (submit)))

the unauthed blog is:
route [:posts, :comments]
add_attrs { :posts => "body:text title:string", :comments => "body:text" }

(route (posts comments))
(add_attrs { 'posts => "body:text title:string", 'comments => "body:text" })

the auth'd blog is
route [authenticated_user(:route => true), [:posts, comments]]
add_attrs { 'posts => "body:text title:string", 'comments => "body:text" }

(route ((authenticated_user {'route => t}) ('posts 'comments)))
(add_attrs { 'posts => "body:text title:string", 'comments => "body:text" })
