a goaloc entity needs to be able to encapsulate roughly what a merb slice does:  the model, view, and controller parts of an application.

it needs:

model:
associations
dbfields
validations
model_lifecycle_callbacks:  before_save, after_validate, etc..

controller:
list of actions to support
filters
destinations for the non-GET actions (delete, create, update ) (pretty much only 2 reasonable options for each)

view:
form, large and small individual representations, collection representation, optionally a layout

tests:
unit
functional
a coverage metric (how hard do you want this covered?)


An app has a collection of such entities, and also
routes
plugins
gems
configuration


how does this play with javascript?  maybe better than rails.
how does this do continuation-based apps?

I should be able to indicate to the app that it will always have an instance of a given class, accessible by a given method_name

so, eg., when you install restful_auth, it can tell the app that there is a user available under current_user

actually, current_user makes sense in an app-from the point of view of any given controller, there will always be exactly one current user, so that should be visible in the framework and available to anyone.

also, need to cope with roles, probably.

I should make a migration_order accessor, so people can define the order in which migrations happen.  This would also, coincidentally, allow me to get rid of the Kernel.sleep(1) hack.

It might be interesting, as a process note, to develop goaloc in two parts:  a front end which is mostly about poking objects and modifying their state (at which ruby excels) and another part that is all about code generation (at which ruby is OK and lisp is unbeatable).  The interface between the two might be reasonably easy to express in thrift.

Need a name for the thing that you generate when you do

route :posts

a goal?  an entity?  goal is cuter.


plan for the rewrite:
BDD the goal object
  fields
  associations
  validations
  lifecycle callbacks
  class/instance meths
  requires/acts_as_* calls

BDD the code generator
  migration
  model
  controller
  views
    index
    show
    form
    partials


Questions:
do I need to define classes?  Might it suffice to define instances, and perhaps bind appropriately-named constants to them?
how do I define a blog such that it only has the create method on comments routed, and not the others?
how hard is it to serve it directly?  (need to add rack handler)
do I need to add the ability to do continuation-based apps?
how soon should I make this able to serve itself?

It'd be nice to rename something and have that rename propagate to all the places it might be needed.




Web App golf:

CoC is a great idea.  What is the minimum that I could possibly write to get the following apps:

hello-world(something that generates a page that says 'hello world')
unauth'd blog(just 2 models, standard REST actions)
auth'd blog(users, posts, comments) (assuming the presence of an authentication module)
lemmr (posts, comments, ratings on both, asymmetric friendships, login, per-user feeds on different sites)
twitter at trivial scale - should be easy.
twitter at moderate scale - should be an easyish refactor on the trivial scale one.

I think the hello-world one is:
defresp "/" "hello"

(defresp / "hello")


the blog is:
route [:posts, :comments]
add_attrs { :posts => "body:text title:string", :comments => "body:text" }

(route (posts comments))
(add_attrs { 'posts => "body:text title:string", 'comments => "body:text" })

the auth'd blog is
route [authenticated_user(:route => true), [:posts, comments]]
add_attrs { 'posts => "body:text title:string", 'comments => "body:text" }

(route ((authenticated_user {'route => t}) ('posts 'comments)))
(add_attrs { 'posts => "body:text title:string", 'comments => "body:text" })


lemmr is:



There should be a console in which one can start a repl, with a live server attached, so one can flip back and forth effortlessly.


a web framework should probably distinguish between requests for which server-side state is necessary, and requests for which it is not.

need a code generation framework.  It must be capable of the following:
-copy file or dir from one place to another
-render an ERB file with some vars set and put that someplace
-delete a file
-stick stuff into a file

all of these should check to see if the file already exists and is ask before throwing any content away
(putting new things in a file without asking is ok)

Need to make polymorphic assocs, and probably to make routes into a hash.

might want to display an object graph, possibly as a javascript FDG

need to make HTTP part of the framework, so proper response codes are returned, etc.


new things to handle:  application generators (create for rails a file like thisone:
rails newapp -m http://www.railsboost.com/917.rb

and then call rails myapp -m http://www.railsboost.com/917.rb




more new stuff from the blog in 15 mins with rails2:

link_to_unless_current
render :partial => @post
render :partial => @posts
render @post ?? <= does this work?

format.atom
(in index.atom.builder)
atom_feed do |feed|
  feed.title("blah")
  feed.updated(@posts.first.created_at)

  @posts.each do |post|
    feed.entry(post) do |entry|
      entry.title(post.title)
      entry.content(post.body, :type => "html")
      entry.author { |author| author.name("matt knox")}
    end
  end
end

in <head>
auto_discovery_link_tag :atom, formatted_posts_path(:atom)

authenticate_or_request_with_http_basic do |name, password|
  name == "foo" && password == "bar"
end

time_ago_in_words(Time.now)

in rjs:
page.insert_html <position>, <target>, <content>
page[@comment].visual_effect :highlight
page[:new_comment].reset


example app:
I entered this:
route [:users, :profiles, :ratings, :follows, :submissions, :comments], [:submissions, :comments, :ratings]
add_attrs :ratings => "ratable_id:integer ratable_type:string score:integer", :follow => "followed_id:integer submissions:boolean upvotes:boolean", :submission => "url:string title:string score:float", :comments => "body:text"
and then had to edit in the polymorphic assocs, etc.

I wanted to enter this:
route [:users, :profile, :ratings, {:class => :user, :through => :follows}, :submissions, :comments], [:submissions, {:class => :rating, :poly => :ratable}, [:comments, {:class => :rating, :poly => :ratable}]]
add_attrs :ratings => "score:integer", :follow => "followed_id:integer submissions:boolean upvotes:boolean", :submission => "url:string title:string score:float", :comments => "body:text"

Should I approach this as a framework, or as a code generator for rails?  the first seems more interesting.  Perhaps I should make it possible to compile down to a bunch of rack instances that communicate over http, similar to django's rack-equivalent.  (pinax)

Possibly should retarget this at lisp, for better codegen, if I'm going to do it as an honest-to-god framework.  Alternatively, I could do it again in ruby, or even refactor it from its current state.

If I do a framework, should it be continuation-passing and REST, or just REST?





Order of operations:
-handler for HTTP requests (probably rack is good enough)
-templating language (haml/erb might do here, but macros might be nice)
-ORM
-router
-form builder
-deserialization code for forms data microformat.
-hooks in controllers



Talked with @rael about what a framework would need to encourage good scaling practices in the same way that rails encourages MVC and rest.  His answer:

instead of the current rails idiom of:
@user = User.find(params[:user_id])
render :partial => 'status', :collection => @user.timeline.statuses

the code should be like this:

@user = User.find(params[:user_id])
render :partial => 'status', :collection => Status.get(Timeline.for_user_id(@user.id).ids)

the latter demos less nicely, in that it is longer, but because you are not now reaching from the user object through the timeline to some statuses, but rather reaching some statuses by a method on the Status class, you end up with three nicely seperable services (User, Status and Timeline), which can then be changed relatively easily.

marcel had similar input, and suggested that strongly encouraging a service decomposition upfront is the most important thing.  Need to consider the app I'd want to write for the initial twitter prototype and also for the current state of the app.  Marcel also noted that having ActiveModel split from ActiveRecord might help in this regard, in that people might write ActiveService, which could be implemented as a network service with an API similar to ActiveRecord.




what code would I want to wrie to specify twitter?
requirements:
users can tweet
all tweets by a user are that user's user_timeline
users can follow each other
the union of the user timelines of all the people a user follows is that user's home_timeline

Prototype code:
rails:
script/generate scaffold user ...
script/generate scaffold status ...
User.has_many :statuses
User.has_many :followed_users, :through => :following, :class => User

def home_timeline
  user.followed_users.map { |u| u.statuses }.flatten.sort
end


goaloc:
route [:users, :statuses, [:users, :through => :following]]
add_attrs ....
User.instance.home_timeline = { |user| user.followed_users.map { |u| u.statuses }.flatten.sort }


Production code for home timeline:
rails:
def User.home_timeline

end

goaloc:



Possible rewrite:
People keep joking that I should just be able to say "goaloc blog" and get an app.  Is that actually a bad idea?  I'm not sure.  It seems like it would be a great idea to be able to say, for instance, that at any given point, you should be able to include an entire app rooted at the spot in the routes you currently occupy.  Something like this:

route [:users, blog, photogallery]

could make a blog that is accessible through the user object.  Each goal-generating function could come with a bunch of options, like setting authentication, etc.

This would allow people to make individual web components, possibly including views.

This almost suggests a need for a gem-like system for "goals" (might need a better name for it and for the project as a whole), and really points up the importance of making this servable on its own-it would be great to be able to toss in a component, look at the resulting app, and then change it.

need to be able to specify that things belong to the current user, and to specify that there must be a current user in scope for some set of routes.

So the blog should be
route [authenticated_user, [:posts, :comments]]
